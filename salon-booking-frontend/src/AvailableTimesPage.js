import React, { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";

const AvailableTimesPage = () => {
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const selectedDate = queryParams.get("date"); // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å URL

  const [bookedTimes, setBookedTimes] = useState([]); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô
  const [timeSlots, setTimeSlots] = useState([]);

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (09:00 - 19:00) ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏° 12:00 - 13:00
  const generateTimeSlots = () => {
    const times = [];
    let current = new Date(`2023-01-01T09:00:00`);
    const endTime = new Date(`2023-01-01T19:00:00`);

    while (current < endTime) {
      const startTime = current.toTimeString().slice(0, 5);
      current.setMinutes(current.getMinutes() + 30);
      const endTime = current.toTimeString().slice(0, 5);

      // ‚ùå ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å 12:00 - 13:00
      if (startTime !== "12:00" && startTime !== "12:30") {
        times.push(`${startTime}-${endTime}`);
      }
    }
    return times;
  };

  useEffect(() => {
    if (!selectedDate) return;

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡∏à‡∏≤‡∏Å API ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const fetchBookedTimes = async () => {
      try {
        const response = await fetch(`http://127.0.0.1:8000/api/bookings/?date=${selectedDate}`);
        if (response.ok) {
          const data = await response.json();
          const booked = data.map((booking) => booking.booking_time.slice(0, 5)); // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤ HH:MM
          setBookedTimes(booked); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state bookedTimes
        } else {
          console.error("‚ö†Ô∏è API ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ");
          setBookedTimes([]);
        }
      } catch (error) {
        console.error("üö® Error fetching booked times:", error);
        setBookedTimes([]);
      }
    };

    fetchBookedTimes();
    setTimeSlots(generateTimeSlots()); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï timeSlots ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô
  }, [selectedDate]);

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°
  const getButtonStyle = (time) => {
    const startTime = time.split("-")[0];

    if (bookedTimes.includes(startTime)) {
      return { backgroundColor: "red", color: "white", cursor: "not-allowed" }; // ‚ùå ‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á (‡∏™‡∏µ‡πÅ‡∏î‡∏á)
    } else {
      return { backgroundColor: "#2196F3", color: "white", cursor: "default" }; // ‚úÖ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á (‡∏™‡∏µ‡∏ü‡πâ‡∏≤)
    }
  };

  return (
    <div>
      <h1>üïí ‡∏Ñ‡∏¥‡∏ß‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {selectedDate}</h1>
      <div
        style={{
          display: "grid",
          gridTemplateColumns: "repeat(3, 1fr)",
          gap: "10px",
          marginTop: "20px",
        }}
      >
        {timeSlots.map((time) => (
          <button
            key={time}
            style={{
              padding: "10px",
              borderRadius: "5px",
              border: "1px solid #ddd",
              ...getButtonStyle(time),
            }}
            disabled
          >
            {time}
          </button>
        ))}
      </div>
    </div>
  );
};

export default AvailableTimesPage;
