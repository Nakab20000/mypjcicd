import React, { useState, useEffect, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import "./AdminPage.css";
import HeaderAdmin from "./HeaderAdmin";

const AdminBookingsPage = () => {
    const navigate = useNavigate();
    const [bookings, setBookings] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [cancelReasons, setCancelReasons] = useState({});

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const fetchBookings = useCallback(async () => {
        try {
            const accessToken = localStorage.getItem("accessToken");
            if (!accessToken) {
                alert("Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!");
                navigate("/login");
                return;
            }

            const response = await fetch("http://127.0.0.1:8000/api/all-bookings/", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${accessToken}`,
                },
            });

            if (!response.ok) {
                throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ");
            }

            const data = await response.json();
            setBookings(data);
        } catch (error) {
            setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        } finally {
            setLoading(false);
        }
    }, [navigate]);

    useEffect(() => {
        fetchBookings();
    }, [fetchBookings]);

    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô)
    const sortedBookings = [...bookings].sort((a, b) => {
        const dateA = new Date(`${a.booking_date} ${a.booking_time}`);
        const dateB = new Date(`${b.booking_date} ${b.booking_time}`);
        return dateB - dateA; // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
    });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    const handleUpdateStatus = async (bookingId, newStatus) => {
        try {
            const accessToken = localStorage.getItem("accessToken");
            const response = await fetch(`http://127.0.0.1:8000/api/booking/update-status/${bookingId}/`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${accessToken}`,
                },
                body: JSON.stringify({ status: newStatus }),
            });

            if (!response.ok) {
                throw new Error("Failed to update booking status.");
            }

            alert(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "${newStatus}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
            fetchBookings();
        } catch (error) {
            alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message);
        }
    };

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
    const handleConfirmCancel = async (bookingId) => {
        const reason = cancelReasons[bookingId] || "";
        if (!reason) {
            alert("‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å");
            return;
        }

        try {
            const accessToken = localStorage.getItem("accessToken");
            const response = await fetch(`http://127.0.0.1:8000/api/booking/update-status/${bookingId}/`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${accessToken}`,
                },
                body: JSON.stringify({ status: "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", reason }),
            });

            if (!response.ok) {
                throw new Error("Failed to cancel booking.");
            }

            alert("‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
            fetchBookings();
            setCancelReasons((prev) => {
                const updated = { ...prev };
                delete updated[bookingId];
                return updated;
            });
        } catch (error) {
            alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message);
        }
    };

    const handleCancelInput = (bookingId) => {
        setCancelReasons((prev) => {
            const updated = { ...prev };
            delete updated[bookingId];
            return updated;
        });
    };

    if (loading) return <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>;
    if (error) return <p style={{ color: "red" }}>‚ùå {error}</p>;

    return (
        <div className="admin-page">
            <HeaderAdmin />
            <div className="content">
                <h2>üìÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h2>
                <table className="booking-table">
                    <thead>
                        <tr>
                            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                            <th>‡πÄ‡∏ß‡∏•‡∏≤</th>
                            <th>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</th>
                            <th>‡∏ó‡∏£‡∏á‡∏ú‡∏°</th>
                            <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                            <th>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</th>
                            <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                        </tr>
                    </thead>
                    <tbody>
                        {sortedBookings.map((booking) => (
                            <tr key={booking.booking_id}>
                                <td>{booking.booking_date}</td>
                                <td>{booking.booking_time}</td>
                                <td>{booking.user.username}</td>
                                <td>{booking.hair_style}</td>
                                <td className={`status-${booking.status}`}>{booking.status}</td>
                                <td>
                                    {booking.status === "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" || booking.status === "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
                                        ? booking.cancel_reason || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"
                                        : "-"}
                                </td>
                                <td>
                                    {booking.status === "‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" && cancelReasons[booking.booking_id] === undefined && (
                                        <button
                                            className="complete-btn"
                                            onClick={() => handleUpdateStatus(booking.booking_id, "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")}
                                        >
                                            ‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                                        </button>
                                    )}

                                    {booking.status === "‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" && (
                                        cancelReasons[booking.booking_id] === undefined ? (
                                            <button
                                                className="cancel-btn"
                                                onClick={() => setCancelReasons({ ...cancelReasons, [booking.booking_id]: "" })}
                                            >
                                                ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                            </button>
                                        ) : (
                                            <div>
                                                <input
                                                    type="text"
                                                    placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•..."
                                                    value={cancelReasons[booking.booking_id]}
                                                    onChange={(e) => setCancelReasons({
                                                        ...cancelReasons,
                                                        [booking.booking_id]: e.target.value,
                                                    })}
                                                />
                                                <button
                                                    className="confirm-btn"
                                                    onClick={() => handleConfirmCancel(booking.booking_id)}
                                                >
                                                    ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                                                </button>
                                                <button
                                                    className="cancel-btn"
                                                    onClick={() => handleCancelInput(booking.booking_id)}
                                                >
                                                    ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                                </button>
                                            </div>
                                        )
                                    )}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default AdminBookingsPage;